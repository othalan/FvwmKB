#!/usr/bin/env python2.7

import sys
import fvwm

from fvwm  import FvwmModule
from fvwm  import FvwmPacket
from XInfo import XInfo

class PropertyDefault(property):
    """
    The python builtin class 'property' creator modified to allow setting a
    default value for the property if the actual value has not yet been
    set.
    """
    def __init__(self, fget=None, fset=None, fdel=None, doc=None, default=None):
        super(PropertyDefault, self).__init__(fget, fset, fdel, doc)
        self._default = default
    def __get__(self, *arg, **kw):
        try:
            value = super(PropertyDefault, self).__get__(*arg, **kw)
        except AttributeError:
            value = self._default
        return value

class AlreadyRunning(Exception): pass

class LayoutManager(object):
    __status = {'working': False}

    def __init__(self, fvwmObj, column):
        self.fvwm    = fvwmObj
        self.column  = column
        self.current = -1

        # XXX NOTE:  Not thread safe!
        if not self.__status['working']:
            self.__status['working'] = True
        else:
            raise AlreadyRunning
        self.fvwm.registerCallback('M_CONFIGURE_WINDOW', self.onLayoutConfig)

    def __del__(self):
        self.__status['working'] = False

    def layout(self):
        self.total     = len(self.column)
        self.current   = 0
        self.available = self.column.height
        self.top       = self.column.top
        self.next()

    def next(self):
        if self.total != len(self.column):
            self.layout()
        elif self.current >= len(self.column):
            self.fvwm.unregisterCallback('M_CONFIGURE_WINDOW', self.onLayoutConfig)
        else:
            maxHeight = self.available / (len(self.column) - self.current)
            self.fvwm.sendTo(self.column[self.current].id, 'ResizeMove frame %ip %ip %ip %ip' % (
                self.column.width, maxHeight,
                self.column.left, self.top))

    def onLayoutConfig(self, packet):
        if self.current == -1:
            pass
        elif self.total != len(self.column):
            self.layout()
        elif packet.windowId == self.column[self.current].id:
            self.available -= self.column[self.current].packet.frame_height
            self.top       += self.column[self.current].packet.frame_height
            self.current   += 1
            self.next()


class TiledLayoutManager(LayoutManager):
    def __init__(self, fvwmObj, windows):
        super(self, TiledLayoutManager).__init__(fvwmObj, windows)


class Window(object):
    def __init__(self, parent, addPacket, fvwmInterface):
        super(Window, self).__init__()
        self._parent   = parent
        self.id        = addPacket.windowId
        self.packet    = addPacket
        self._fvwm     = fvwmInterface
        self.fvwm.registerCallback('M_CONFIGURE_WINDOW', self.onLayoutConfig)
        # XXX Should M_FOCUS_CHANGE be used?
        # XXX \-> If so, must unfocus previous by searching active windows....
        self.fvwm.registerCallback('MX_ENTER_WINDOW', self.onEnterWindow)
        self.fvwm.registerCallback('MX_LEAVE_WINDOW', self.onLeaveWindow)
        self.parent.append(self)

    def __str__(self):
        return "0x%X" % self.id

    def onLayoutConfig(self, packet):
        if packet.windowId == self.id:
            self.packet = packet

    def onEnterWindow (self, packet): self._focus = True
    def onLeaveWindow (self, packet): self._focus = False

    id = property(
        lambda self   : self._id,
        lambda self, x: setattr(self, '_id', x),
        doc = "Window ID Value")
    packet = property(
        lambda self   : self._packet,
        lambda self, x: setattr(self, '_packet', x),
        doc = "Window Add/Configure Packet")
    fvwm = property(
        lambda self   : self._fvwm,
        doc = "FVWM Interface Object for sending commands")
    parent = property(
        lambda self: self._parent,
        doc = 'Column object this window resides in')
    hasFocus = property(
        lambda self: self._focus,
        # TODO: Allow this to be set in order to set focus on a window?
        doc = 'This window has "focus" (is active)')

class Column(list):
    def __init__(self, parent, fvwmInterface, *arg):
        super(Column, self).__init__(*arg)
        self._parent = parent
        self._fvwm   = fvwmInterface
        self._width  = XInfo().Width()
        self._height = XInfo().Height()
        self._top    = 0
        self._left   = 0
        self._active = False

    def __str__(self):
        items = map(lambda x: str(x), self)
        return "[%s]" % ', '.join(items)

    def append(self, window):
        list.append(self, window)
        self.layoutTiled()

    def remove(self, obj):
        if isinstance(obj, int) or isinstance(obj, long):
            for win in self:
                if win.id == obj:
                    list.remove(self, win)
                    break
        elif isinstance(obj, FvwmPacket):
            for win in self:
                if win.id == obj.windowId:
                    list.remove(self, win)
                    break
        else:
            list.remove(self, obj)
        self.layoutTiled()

    def layoutTiled(self):
        try:
            mgr = LayoutManager(self.fvwm, self)
            mgr.layout()
        except AlreadyRunning:
            pass
        return

    # Find the active window object, if any
    def findActiveWin(self):
        for win in self:
            if win.hasFocus:
                return win
        return None

    parent = property(
        lambda self: self._parent,
        doc = 'Parent object this column resides in')
    fvwm = property(
        lambda self   : self._fvwm,
        doc = "FVWM Interface Object for sending commands")
    width = property(
        lambda self   : self._width,
        lambda self, x: setattr(self, '_width', x),
        doc = 'Column Width')
    height = property(
        lambda self   : self._height,
        lambda self, x: setattr(self, '_height', x),
        doc = 'Column Height')
    top = property(
        lambda self   : self._top,
        lambda self, x: setattr(self, '_top', x),
        doc = 'Column Top edge coordinate')
    left = property(
        lambda self   : self._left,
        lambda self, x: setattr(self, '_left', x),
        doc = 'Column Left edge coordinate')
    active = property(
        lambda self   : self._active,
        lambda self, x: setattr(self, '_active', x),
        doc = 'Active Window')

class FvwmiPlacementManager(FvwmModule):
    MODULE = "*FvwmiPlacementManager"
    def __init__(self, *args):
        self.__initialized = False

        self.registerCallback('M_ADD_WINDOW', self.OnNewWindow)
        self.registerCallback('M_DESTROY_WINDOW', self.OnDestroyWindow)
        self.registerCallback('M_CONFIG_INFO', self.onConfigInfo)
        self.registerCallback('M_END_CONFIG_INFO', self.onEndConfigInfo)

        self.registerCallback('*', self.printAllPackets)
        self.registerCommand ('*', self.printAllCommands)

        self.__col = Column(None, self) # XXX Eventually this will be a list of desks

        self.__InWindowList = False
        self.__InConfigList = False
        self.__x            = XInfo()

        super(FvwmiPlacementManager, self).__init__(*args)

    def ParseOptionalArgs(self, *args):
        self.initGetConfigLine(self.MODULE)
        self.setMessageMask(0
                | fvwm.M_ADD_WINDOW
                | fvwm.M_DESTROY_WINDOW
                | fvwm.M_FOCUS_CHANGE
                | fvwm.M_CONFIGURE_WINDOW
                | fvwm.M_SENDCONFIG
                | fvwm.M_STRING
                | fvwm.M_CONFIG_INFO)

        self.setMessageMask(0
                | fvwm.MX_ENTER_WINDOW
                | fvwm.MX_LEAVE_WINDOW)

        self.send(0, "Nop")


    def onEndConfigInfo(self, packet):
        """On M_END_CONFIG_INFO at module start, notify that configuration is complete"""
        if not self.__initialized:
            self.__initialized = True
            self.sendFinishedStartupNotification()

    def onConfigInfo(self, packet):
        if packet.text.startswith(self.MODULE):
            # TODO: Parse module configuration here....
            pass

    def printAllPackets(self, packet):
        try:
            print "%8.8X %s" % (packet.windowId, packet.packetName),
        except AttributeError:
            print " "*8, packet.packetName,

        if 'text' in packet.fields:
            print packet.text
        else:
            print ""

    def printAllCommands(self, *cmd):
        print "COMMAND: %s" % (' '.join(cmd))


    def PlaceStackedWindow(self, packet):
        pass

    def PlaceMaximizedWindow(self, packet):
        pass

    def PlaceTiledWindow(self, packet):
        pass

    def OnDestroyWindow(self, packet):
        self.__col.remove(packet.windowId)

    def OnNewWindow(self, packet):
        win = Window(self.__col, packet, self)

if __name__ == "__main__":
    try:
        module = FvwmiPlacementManager(*sys.argv)
    except KeyboardInterrupt, ex:
        pass

# vim:set ts=4 sw=4 et nu:
